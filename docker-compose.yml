services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - projeto_dados_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - projeto_dados_network

  airflow-webserver:
    image: apache/airflow:2.7.3
    container_name: airflow-webserver
    restart: unless-stopped
    environment:
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW_UID: ${AIRFLOW_UID}
    user: "${AIRFLOW_UID}:0"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - projeto_dados_network
    command: >
      bash -c "airflow db init &&
      airflow users create 
      --username ${AIRFLOW_USER_USERNAME} 
      --password ${AIRFLOW_USER_PASSWORD} 
      --firstname Airflow 
      --lastname User 
      --role Admin 
      --email ${AIRFLOW_USER_EMAIL} 
      &&
      airflow webserver"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.3
    container_name: airflow-scheduler
    restart: unless-stopped
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW_UID: ${AIRFLOW_UID}
    user: "${AIRFLOW_UID}:0"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      - airflow-webserver
      - postgres
    networks:
      - projeto_dados_network
    command: ["airflow", "scheduler"]

  dbt:
    build:
      context: .
    container_name: dbt
    env_file: .env
    environment:
      DBT_HOST: ${DBT_HOST}
      DBT_USER: ${DBT_USER}
      DBT_PASSWORD: ${DBT_PASSWORD}
      DBT_PORT: ${DBT_PORT}
      DBT_DATABASE: ${DBT_DATABASE}
    volumes:
      - ./dbt:/app
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - projeto_dados_network
    command: ["tail", "-f", "/dev/null"]

  streamlit:
    build: .
    container_name: streamlit
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./src:/app/src
      - ./streamlit_app:/app/streamlit_app
      - ./.env:/app/.env
    ports:
      - "8501:8501"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - projeto_dados_network
    command: ["streamlit", "run", "streamlit_app/app.py", "--server.port=8501", "--server.address=0.0.0.0"]

volumes:
  postgres_data:

networks:
  projeto_dados_network:
    driver: bridge
